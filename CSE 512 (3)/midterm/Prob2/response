Problem 2: To move a vector element to the front without loss is that the value that is being moved has to be saved in a certain location and then from where it is being moved the next pointer has to stay intact. For two vector elements to be swaped a temporary variable has to hold either value that is being swaped. The worst case scenario for the selforganizingvector is that for a vector there is a certain amount of memory in the stack that is allocated for the vector and the program that is running. If the stack memory runs out then more temporary memory is allocated for the program. The problem with link list is that a certain amount of memory is allocated for the program to run, now if there is an exponential amount of data being placed in the link list then there is a possibility to run out of memory. This is bad because a link list does not allocate more memory from the stack unless the programmer writes a function to do so. If the vector working with the to_front notation it is an O(n). The vector working with the swap_left is also an O(n). These two are very linear since it is a swap to the left or swap to the front. The link list working with the to_front is an O(n^2). this is due to switching values and having to allocate memory as well as working with the previous and next links. Using the swap left is an O(n) function due to just switching the values of the links in the list. It is much easier because the pointers do not have to be switched but just the values.
