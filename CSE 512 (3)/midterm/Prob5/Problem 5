//Problem 5
//This is for a data structor that is non self organizing though can push
//many values in and then organize depending on what the user says
template <class T>
class Tub
{
	public:
		typedef typename Tub<T>::iterator iterator;
		tub(); //default constructor
		copy_tub(); //copy constructor to make a copy of the original structure
		~tub();

		void insert_at(int value, int location);
		void erase_at(int value, int location);
		void order(string order_type);
		
		//pops and pushes
		void push_back(int value);
		void push_front(int value);
		void pop_back();
		void pop_front();
		//general get functions
		int get_size();
		int get_value();
		
		//overload operators
		T & operator*();
	        Tub<T> & operator=(const ListIterator<T> & rhs);
	        bool operator==(const iterator & rhs) const;
	        bool operator!=(const iterator & rhs) const;
	        // T. Budd has the ++ and -- operators backwards
	        // regarding pre- and post-increment;
	        Tub<T>& operator++(); // pre-increment; ++itr
	        Tub<T> operator++(int); // post-increment; itr++
	        Tub<T>& operator--(); // pre-decrement; ++itr
	        Tub<T> operator--(int); // post-decrement; itr++
		Tub<T> operator[](int); //brace operator; itr[]		
		
	protected:
		some data structure;

}
